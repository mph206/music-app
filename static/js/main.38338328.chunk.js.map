{"version":3,"sources":["components/SearchResult/Artists/Artists.module.scss","components/SearchResult/Albums/Albums.module.scss","components/SearchResult/Lyrics/Lyrics.module.scss","components/SearchResult/Songs/Songs.module.scss","components/Nav/Nav.module.scss","components/Nav/SearchBar/SearchBar.module.scss","components/SearchResult/SearchResult.module.scss","components/Nav/SearchBar/index.js","components/Nav/SearchBar/SearchBar.jsx","components/Nav/index.js","components/Nav/Nav.jsx","components/SearchResult/Albums/index.js","components/SearchResult/Albums/Albums.jsx","components/SearchResult/Artists/index.js","components/SearchResult/Artists/Artists.jsx","components/SearchResult/Songs/index.js","components/SearchResult/Songs/Songs.jsx","components/SearchResult/Lyrics/index.js","components/SearchResult/Lyrics/Lyrics.jsx","components/SearchResult/index.js","components/SearchResult/SearchResult.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","state","className","styles","searchbar","type","onChange","this","props","fetchArtistData","placeholder","autoFocus","icon","faSearch","Component","Nav","nav","Albums","buildAlbumData","albumData","map","album","index","key","id","value","album-index","onClick","fetchSongData","images","length","src","url","alt","faRecordVinyl","name","showArtistImage","artistImage","selectedArtist","autoExpand","songData","expand","small","albums","Artists","buildArtistData","artistData","artist","undefined","artist-index","fetchAlbumData","faUserCircle","artists","Songs","buildSongData","song","track-number","track_number","fetchLyrics","showAlbumText","selectedAlbum","songs","Lyrics","renderLyrics","lyrics","promptUser","selectedSong","replace","albumImage","noChoice","style","backgroundImage","SearchResult","results","dataObject","App","token","event","setState","searchTerm","target","split","join","fetch","headers","then","response","json","result","items","catch","err","console","log","artistIndex","getAttribute","artistId","albumIndex","albumId","songName","slice","status","data","error","myHeaders","Headers","append","urlencoded","URLSearchParams","method","body","access_token","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.38338328.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"artists\":\"Artists_artists__pNLOW\",\"small\":\"Artists_small__1ckAp\",\"expand\":\"Artists_expand__2qnZ5\",\"artist\":\"Artists_artist__2hqc0\",\"icon\":\"Artists_icon__10IHG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"albums\":\"Albums_albums__3hnLx\",\"small\":\"Albums_small__zo5hx\",\"expand\":\"Albums_expand__1xz8v\",\"icon\":\"Albums_icon__4vR6T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lyrics\":\"Lyrics_lyrics__2IwX5\",\"noChoice\":\"Lyrics_noChoice__P5ipr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"songs\":\"Songs_songs__socNW\",\"expand\":\"Songs_expand__1a4r-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Nav_nav__2p4vD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"SearchBar_searchbar__lEo3K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"results\":\"SearchResult_results__2M46K\"};","import SearchBar from './SearchBar.jsx';\nexport default SearchBar;","import React, { Component } from 'react';\nimport styles from './SearchBar.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\n\n\nclass SearchBar extends Component {\n    state = {  }\n    render() { \n        return (\n            <div className={styles.searchbar}>\n                <input type='text' onChange={this.props.fetchArtistData} placeholder=\"Search Artist\" autoFocus/>\n                <FontAwesomeIcon icon={faSearch} />\n            </div>\n          );\n    }\n}\n \nexport default SearchBar;","import Nav from './Nav.jsx';\nexport default Nav;","import React, { Component } from 'react';\nimport styles from './Nav.module.scss';\nimport SearchBar from './SearchBar'\n\nclass Nav extends Component {\n    state = {  }\n    render() { \n        return (\n            <header className={styles.nav}>\n                <h1>Spotify Song Search</h1>\n                <SearchBar fetchArtistData={this.props.fetchArtistData}/>\n            </header>\n          );\n    }\n}\n \nexport default Nav;","import Albums from './Albums.jsx';\nexport default Albums;","import React, { Component } from 'react';\nimport styles from './Albums.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRecordVinyl } from '@fortawesome/free-solid-svg-icons';\n\nclass Albums extends Component {\n\n    // find a way for to only need to set value on div\n    buildAlbumData = () => {\n        return this.props.albumData.map((album, index) => {\n            return (\n                <div key={album.id} value={album.id} album-index={index} onClick={this.props.fetchSongData}>\n                    {album.images.length > 0 ? <img src={album.images[2].url} alt=\"album cover\"/> : <FontAwesomeIcon className={styles.icon} icon={faRecordVinyl} />}\n                    <h3 value={album.id} album-index={index}>{album.name}</h3>\n                </div>\n            )\n        })\n    }\n\n    showArtistImage = () => {\n        return this.props.artistImage.length > 1 ? \n        <header> \n            <h2>Albums by {this.props.selectedArtist}</h2>\n            <img src={this.props.artistImage} alt=\"artist\"/>\n        </header>\n        : null\n    }\n\n    autoExpand = () => {\n        return this.props.albumData.length === 0\n        ? null\n        : this.props.songData.length === 0\n        ? styles.expand \n        : styles.small\n    }\n\n\n    render() { \n        return (\n            <section className={`${styles.albums} ${this.autoExpand()}`}>\n                {this.showArtistImage()}\n                {this.buildAlbumData()}\n            </section>\n          );\n    }\n}\n \nexport default Albums;","import Artists from './Artists.jsx';\nexport default Artists;","import React, { Component } from 'react';\nimport styles from './Artists.module.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle } from '@fortawesome/free-solid-svg-icons';\n\nclass Artists extends Component {\n\n    buildArtistData = () => {\n        return this.props.artistData.map((artist, index) => {\n            return artist !== undefined ? (\n                '' || \n                <div className={styles.artist} key={artist.id} artist-index={index} value={artist.id} onClick={this.props.fetchAlbumData}>\n                    {artist.images.length > 0 ? <img src={artist.images[2].url} alt=\"artist\"/> : <FontAwesomeIcon className={styles.icon} icon={faUserCircle} />}\n                    <h2 value={artist.id} artist-index={index}>{artist.name}</h2>\n                </div>\n            ) : ''\n        })\n    }\n\n    autoExpand = () => {\n        return this.props.artistData.length === 0\n        ? null\n        : this.props.albumData.length === 0\n        ? styles.expand\n        : styles.small\n    }\n\n    render() { \n        return (\n            <section className={`${this.autoExpand()} ${styles.artists}`} >\n                {this.buildArtistData()}\n            </section>\n          );\n    }\n}\n \nexport default Artists;","import Songs from './Songs.jsx';\nexport default Songs;","import React, { Component } from 'react';\nimport styles from './Songs.module.scss';\n\nclass Songs extends Component {\n\n    buildSongData = () => {\n        return this.props.songData.map((song) => {\n            return (\n                <div key={song.id} track-number={song.track_number} value={song.name} onClick={this.props.fetchLyrics}>\n                    <h3 track-number={song.track_number} value={song.name}>{song.name}</h3>\n                </div>\n            )\n        })\n    }\n\n    showAlbumText = () => {\n        return this.props.selectedAlbum ? \n            <header> \n                <h2>Songs from {this.props.selectedAlbum} by {this.props.selectedArtist}</h2>\n            </header>\n            : null\n    }\n\n    autoExpand = () => {\n        return this.props.songData.length === 0\n        ? styles.songs\n        : `${styles.songs} ${styles.expand}`\n    }\n\n    render() { \n        return (\n            <section className={this.autoExpand()}>\n                {this.showAlbumText()}\n                {this.buildSongData()}\n            </section>\n          );\n    }\n}\n \nexport default Songs;","import Lyrics from './Lyrics.jsx';\nexport default Lyrics;","import React, { Component } from 'react';\nimport styles from './Lyrics.module.scss';\n\nclass Lyrics extends Component {\n    \n    renderLyrics = () => {\n    return this.props.lyrics\n        ? <p>{this.props.lyrics}</p> \n        : null\n    }\n\n    promptUser = () => {\n        if (this.props.selectedSong) {\n            return <h2>{`${this.props.selectedSong.replace(/[+]/g, ' ')} - ${this.props.selectedArtist}`}</h2>\n        } else if (this.props.albumImage) {\n            return <h2>Choose a song</h2>\n        } else if (this.props.selectedArtist) {\n            return <h2 className={styles.noChoice}>Choose an album</h2>\n        } else if (this.props.artistData.length > 0) {\n            return <h2 className={styles.noChoice}>Choose an artist</h2>\n        } else {\n            return <h2 className={styles.noChoice}>Search for an artist</h2>\n        } \n    }\n\n    render() { \n        return (\n            <section \n                className={styles.lyrics} \n                style={{backgroundImage: `url(${this.props.albumImage})`}}\n            >\n                <article>\n                    {this.promptUser()}\n                    {this.renderLyrics()}\n                </article>\n            </section>\n          );\n    }\n}\n \nexport default Lyrics;","import SearchResult from './SearchResult.jsx';\nexport default SearchResult;","import React, { Component } from 'react';\nimport styles from './SearchResult.module.scss';\nimport Albums from './Albums';\nimport Artists from './Artists';\nimport Songs from './Songs';\nimport Lyrics from './Lyrics';\n\n\nclass SearchResult extends Component {\n\n    render() { \n        return (\n            <section className={styles.results}>\n                {this.props.dataObject}\n                <Artists \n                    artistData={this.props.artistData} \n                    fetchAlbumData={this.props.fetchAlbumData}\n                    albumData={this.props.albumData}/>\n                <Albums \n                    fetchSongData={this.props.fetchSongData} \n                    albumData={this.props.albumData} \n                    artistImage={this.props.artistImage} \n                    selectedArtist={this.props.selectedArtist}\n                    songData={this.props.songData}\n                    artistData={this.props.artistData} \n                    />\n                <Songs \n                    songData={this.props.songData} \n                    fetchLyrics={this.props.fetchLyrics} \n                    selectedArtist={this.props.selectedArtist} \n                    selectedAlbum={this.props.selectedAlbum} \n                    albumImage={this.props.albumImage}/>\n                <Lyrics fetchLyrics={this.props.fetchLyrics} \n                    lyrics={this.props.lyrics}\n                    songData={this.props.songData} \n                    albumImage={this.props.albumImage}\n                    selectedSong={this.props.selectedSong}\n                    selectedArtist={this.props.selectedArtist}\n                    artistData={this.props.artistData}\n                    />\n            </section>\n          );\n    }\n}\n\n \nexport default SearchResult;","import React, { Component } from 'react';\nimport './App.module.scss';\nimport Nav from './components/Nav';\nimport SearchResult from './components/SearchResult';\n\n\nclass App extends Component {\n    state = {\n        token: '',\n        artistData: [],\n        albumData: [],\n        songData: [],\n        selectedArtist: '',\n        artistImage: '',\n        selectedAlbum: '',\n        albumImage: '', \n        lyrics: '',\n        selectedSong: ''\n    }\n\n    componentDidMount() {\n        const myHeaders = new Headers();\n        myHeaders.append(\"Authorization\", \"Basic YzIxOWE5Y2EwYTQ1NDY0YjllY2Q2NGI5YTBjZjMwY2M6NGZkNmJlMjYxNWVkNGZlNThlNTA4ZTg3NGI3MGI4ZGY=\");\n            \n        const urlencoded = new URLSearchParams();\n        urlencoded.append(\"grant_type\", \"client_credentials\");\n        \n        const requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: urlencoded,\n        };\n        \n        fetch(\"https://accounts.spotify.com/api/token\", requestOptions)\n        .then(response => response.json())\n        .then(result => this.setState({\n            token: result.access_token,\n        }))\n        .catch(error => console.log('error', error));\n    }\n\n    fetchArtistData = (event) => {\n        this.setState({\n            albumData: [],\n            artistData: [],\n            songData: [],\n            selectedArtist: '',\n            artistImage: '',\n            selectedAlbum: '',\n            albumImage: '',\n            lyrics: '',\n            selectedSong: ''\n        })\n        const searchTerm = event.target.value.split(' ').join('+');\n        fetch(`https://api.spotify.com/v1/search?q=${searchTerm}&type=artist&limit=10`, {\n            headers: {\n                'Authorization': `Bearer ${this.state.token}`,\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n            })\n            .then(response => response.json())\n            .then(result => this.setState({\n                artistData: result.artists.items\n            }))\n            .catch((err) => console.log('error', err))\n    }\n\n    fetchAlbumData = (event) => {\n        this.setState({\n            songData: [],\n            albumData: [],\n            lyrics: '',\n            selectedAlbum: '',\n            selectedArtist: '',\n            selectedSong: '',\n            albumImage: '',\n        })\n        const artistIndex = event.target.getAttribute('artist-index');\n        const artistId = event.target.getAttribute('value');\n        fetch(`https://api.spotify.com/v1/artists/${artistId}/albums`, {\n            headers: {\n                'Authorization': `Bearer ${this.state.token}`,\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n            })\n            .then(response => response.json())\n            .then(result => this.setState({\n                albumData: result.items,\n                selectedArtist: this.state.artistData[artistIndex].name,\n                artistImage: this.state.artistData[artistIndex].images[1].url\n            }))\n            .catch((err) => console.log('error', err))\n    }\n\n    fetchSongData = (event) => {\n        this.setState({\n            lyrics: '',\n            selectedSong: '',\n        })\n        const albumIndex = event.target.getAttribute('album-index');\n        const albumId = event.target.getAttribute('value');\n\n        fetch(`https://api.spotify.com/v1/albums/${albumId}/tracks`, {\n            headers: {\n                'Authorization': `Bearer ${this.state.token}`,\n                'Content-Type': 'application/x-www-form-urlencoded'\n            }\n            })\n            .then(response => response.json())\n            .then(result => this.setState({\n                songData: result.items,\n                selectedAlbum: this.state.albumData[albumIndex].name,\n                albumImage: this.state.albumData[albumIndex].images[0].url\n            }))\n            .catch((err) => console.log('error', err))\n    }\n\n    // https://lyricsovh.docs.apiary.io/#reference/0/lyrics-of-a-song/search\n    fetchLyrics = (event) =>{\n        const songName = event.target.getAttribute('value')\n            .split(' / ').slice(0, 2)[0]\n            .split(' - ').slice(0, 2)[0]\n        const artist = this.state.selectedArtist;\n        this.setState({selectedSong: songName})\n        fetch(`https://api.lyrics.ovh/v1/${artist}/${songName}`)\n            .then(response => {\n                return response.status !== 404 \n                 ? response.json()\n                    .then(data => this.setState({lyrics: data.lyrics}))\n                 : this.setState({lyrics: 'Lyrics not found'})\n            })    \n            .catch((error) => {\n                console.log('Error is' + error);\n                this.setState({lyrics: error.error});\n            })\n    }\n\n    render() { \n        return (\n            <>\n                <Nav fetchArtistData={this.fetchArtistData}/>\n                <SearchResult \n                    artistData={this.state.artistData} \n                    albumData={this.state.albumData} \n                    fetchAlbumData={this.fetchAlbumData} \n                    fetchSongData={this.fetchSongData} \n                    songData={this.state.songData} \n                    selectedArtist={this.state.selectedArtist} \n                    artistImage={this.state.artistImage} \n                    selectedAlbum={this.state.selectedAlbum} \n                    albumImage={this.state.albumImage}\n                    fetchLyrics={this.fetchLyrics}\n                    lyrics={this.state.lyrics}\n                    selectedSong={this.state.selectedSong}\n                />\n            </>\n          );\n    }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}